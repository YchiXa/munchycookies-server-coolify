import type { SubscriberArgs, SubscriberConfig } from "@medusajs/framework";

console.log("üöö Shipping events subscriber loaded");

// –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö —Ä–µ–≤–∞–ª–∏–¥–∞—Ü–∏–π
const shippingRevalidationQueue = new Map<string, NodeJS.Timeout>();

// –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö —Ä–µ–≤–∞–ª–∏–¥–∞—Ü–∏–π
function debouncedShippingRevalidate(
  key: string,
  callback: () => Promise<void>,
  delay: number = 3000
) {
  // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
  if (shippingRevalidationQueue.has(key)) {
    clearTimeout(shippingRevalidationQueue.get(key)!);
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
  const timeout = setTimeout(async () => {
    await callback();
    shippingRevalidationQueue.delete(key);
  }, delay);

  shippingRevalidationQueue.set(key, timeout);
}

export default async function shippingEventHandler({
  event: { data },
}: SubscriberArgs<{ id: string }>) {
  const entityId = data.id;

  console.log(`üöö Shipping event for entity:`, entityId);

  // –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –¥–æ—Å—Ç–∞–≤–∫–µ —Ä–µ–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –æ—Å–æ–±–µ–Ω–Ω–æ checkout
  debouncedShippingRevalidate("shipping", () => triggerShippingRevalidate());
}

async function triggerShippingRevalidate() {
  console.log(`üîî shipping revalidate`);

  const STOREFRONT_URL = process.env.STOREFRONT_URL!;
  const SECRET = process.env.REVALIDATE_SECRET!;
  const COUNTRY = process.env.DEFAULT_COUNTRY_CODE || "ru";

  // –†–µ–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –æ—Å–æ–±–µ–Ω–Ω–æ checkout
  const tags = ["general", "checkout"].join(",");
  const url = `${STOREFRONT_URL}/api/revalidate?secret=${SECRET}&tags=${tags}&countryCode=${COUNTRY}`;

  console.log("‚Üí calling revalidate endpoint:", url);

  try {
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(
        `Revalidate API ${response.status}: ${response.statusText}`
      );
    }
    console.log(`‚úÖ Shipping revalidation successful`);
  } catch (err) {
    console.error(`shipping revalidate: revalidate call failed`, err);
  }
}

export const config: SubscriberConfig = {
  event: [
    // –°–æ–±—ã—Ç–∏—è –æ–ø—Ü–∏–π –¥–æ—Å—Ç–∞–≤–∫–∏
    "shipping-option.created",
    "shipping-option.updated",
    "shipping-option.deleted",

    // –°–æ–±—ã—Ç–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏
    "shipping-profile.created",
    "shipping-profile.updated",
    "shipping-profile.deleted",

    // –°–æ–±—ã—Ç–∏—è –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏
    "service-zone.created",
    "service-zone.updated",
    "service-zone.deleted",

    // –°–æ–±—ã—Ç–∏—è –≥–µ–æ-–∑–æ–Ω
    "geo-zone.created",
    "geo-zone.updated",
    "geo-zone.deleted",

    // –°–æ–±—ã—Ç–∏—è fulfillment
    "fulfillment-set.created",
    "fulfillment-set.updated",
    "fulfillment-set.deleted",

    // –°–æ–±—ã—Ç–∏—è fulfillment –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    "fulfillment-provider.created",
    "fulfillment-provider.updated",
    "fulfillment-provider.deleted",
  ],
};
